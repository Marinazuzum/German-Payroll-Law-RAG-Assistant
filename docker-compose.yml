version: '3.8'

services:
  # Main RAG Application
  rag-app:
    build: .
    container_name: german-payroll-rag-app
    ports:
      - "8501:8501"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
      - PDF_DATA_PATH=/app/data/raw
      - PROCESSED_DATA_PATH=/app/data/processed
    volumes:
      - ./data:/app/data
      - ./config.py:/app/config.py:ro
    depends_on:
      - chromadb
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Dashboard
  monitoring:
    build: .
    container_name: german-payroll-monitoring
    ports:
      - "8502:8501"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
      - PDF_DATA_PATH=/app/data/raw
      - PROCESSED_DATA_PATH=/app/data/processed
    volumes:
      - ./data:/app/data
      - ./config.py:/app/config.py:ro
    command: ["streamlit", "run", "app/monitoring_dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]
    networks:
      - rag-network
    restart: unless-stopped

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: german-payroll-chromadb
    ports:
      - "8000:8000"
    volumes:
      - ./data/chroma_db:/chroma/chroma
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PDF Processing Service (for batch processing)
  pdf-processor:
    build: .
    container_name: german-payroll-processor
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
      - PDF_DATA_PATH=/app/data/raw
      - PROCESSED_DATA_PATH=/app/data/processed
    volumes:
      - ./data:/app/data
      - ./config.py:/app/config.py:ro
    command: ["python", "src/ingestion/pdf_processor.py"]
    depends_on:
      - chromadb
    networks:
      - rag-network
    profiles:
      - processing

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: german-payroll-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - rag-app
      - monitoring
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - production

networks:
  rag-network:
    driver: bridge

volumes:
  chroma_data:
    driver: local
